{
    "messages": [
        {
            "text": "Yeah\u2026 \u201cmore trouble than it is worth\u201d is exactly what I thought.  The only saving grace is that it _seems_ you can reliably avoid headaches by never doing `from &lt;file&gt; import &lt;class&gt;`\u2026 at the cost of slightly more verbose code.", 
            "type": "message", 
            "user": "U3XTEPJ73", 
            "ts": "1491409242.553033"
        }, 
        {
            "text": ":+1:", 
            "type": "message", 
            "user": "U34BY2K3K", 
            "ts": "1491408601.284303"
        }, 
        {
            "reactions": [
                {
                    "count": 1, 
                    "name": "+1", 
                    "users": [
                        "U3XTEPJ73"
                    ]
                }
            ], 
            "text": "That\u2019s some good troubleshooting though!", 
            "type": "message", 
            "user": "U1XEGP6GZ", 
            "ts": "1491408428.209562"
        }, 
        {
            "text": "Jesus, that is a weird error.  Sometimes I think autoreload is more trouble than it\u2019s worth to be honest", 
            "type": "message", 
            "user": "U1XEGP6GZ", 
            "ts": "1491408416.204506"
        }, 
        {
            "edited": {
                "user": "U3XTEPJ73", 
                "ts": "1491366283.000000"
            }, 
            "attachments": [
                {
                    "thumb_height": 316, 
                    "service_icon": "https://cdn.sstatic.net/Sites/stackoverflow/img/favicon.ico?v=4f32ecc8f43d", 
                    "thumb_width": 316, 
                    "title": "autoreload and package causing TypeError: super(type, obj): obj must be an instance or subtype of type", 
                    "text": "I have python code spanning several files which I packaged up for convenience, ending up with the following 3 files under my_package directory: __init__.py contents: from file1 import * from file2", 
                    "title_link": "http://stackoverflow.com/questions/32481508/autoreload-and-package-causing-typeerror-supertype-obj-obj-must-be-an-insta", 
                    "service_name": "stackoverflow.com", 
                    "id": 1, 
                    "fallback": "autoreload and package causing TypeError: super(type, obj): obj must be an instance or subtype of type", 
                    "thumb_url": "https://cdn.sstatic.net/Sites/stackoverflow/img/apple-touch-icon@2.png?v=73d79a89bded", 
                    "from_url": "http://stackoverflow.com/questions/32481508/autoreload-and-package-causing-typeerror-supertype-obj-obj-must-be-an-insta"
                }
            ], 
            "text": "OK, I got some insight about the problem Steve and I were having this afternoon when calling `super.__init__()` from a derived class.\n\nFirst, the proper Python 2 syntax is indeed `super(&lt;derived class name&gt;, self).__init__(&lt;superclass init args&gt;)` \u2014 just like the class slides said.  Our problem actually wasn\u2019t with the `super()` syntax at all.\n\nInstead, we were running into a known issue/limitation/bug with iPython autoreload when using `from &lt;file&gt; import &lt;class&gt;`.  It seems that when both the superclass and subclass are imported in this way, iPython fails to keep track of class versions properly, and ends up with *two* versions of the subclass in memory at runtime.  That then causes the `isinstance()` check run by `super()` (since Python 2.5, I guess) to fail, and you get the (pretty nonsensical) error message:\n```\n---&gt; 54         super(Dealer, self).__init__('Dealer', 0)\n\nTypeError: super(type, obj): obj must be an instance or subtype of type\n```\n(I say \u2018nonsensical\u2019 because `self` is manifestly of type `Dealer` in the above example.)\n\nAs a result, if one modifies the file containing the derived class *in any way* it will simply fail with an error on the second run.  Every.Damn.Time.  It doesn\u2019t matter if the modification you make is completely trivial and absolutely safe.  Any modification simply breaks iPython\u2019s autoreload mechanism.\n\nThe solution (apart from not developing in iPython) seems to be to avoid using `from &lt;file&gt; import &lt;class&gt;`-style imports when inheritance is involved.  Believe it or not, using `import file` seems to avoid this problem.  (I don\u2019t know is this issue is present in Python 3 or not \u2014 I haven\u2019t tried yet.)\n\nMore here: <http://stackoverflow.com/questions/32481508/autoreload-and-package-causing-typeerror-supertype-obj-obj-must-be-an-insta>", 
            "ts": "1491366119.752250", 
            "user": "U3XTEPJ73", 
            "type": "message"
        }
    ], 
    "channel_info": {
        "topic": {
            "last_set": 1491363109, 
            "value": "Group messaging", 
            "creator": "U3XTEPJ73"
        }, 
        "name_normalized": "mpdm-ewellinger--whsky--jon.courtney--kientz-1", 
        "name": "mpdm-ewellinger--whsky--jon.courtney--kientz-1", 
        "last_read": "1491409242.553033", 
        "creator": "U3XTEPJ73", 
        "is_mpim": true, 
        "is_archived": false, 
        "created": 1491363109, 
        "is_group": true, 
        "members": [
            "U3XTEPJ73", 
            "U34BY2K3K", 
            "U1XEGP6GZ", 
            "U4P3DGLHK"
        ], 
        "unread_count": 0, 
        "is_open": false, 
        "purpose": {
            "last_set": 1491363109, 
            "value": "Group messaging with: @ewellinger @whsky @jon.courtney @kientz", 
            "creator": "U3XTEPJ73"
        }, 
        "unread_count_display": 0, 
        "id": "G4UL8BW9J", 
        "latest": {
            "text": "Yeah\u2026 \u201cmore trouble than it is worth\u201d is exactly what I thought.  The only saving grace is that it _seems_ you can reliably avoid headaches by never doing `from &lt;file&gt; import &lt;class&gt;`\u2026 at the cost of slightly more verbose code.", 
            "type": "message", 
            "user": "U3XTEPJ73", 
            "ts": "1491409242.553033"
        }
    }
}